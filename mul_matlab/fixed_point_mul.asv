function R = fixed_point_mul(A, B, Conf_Bit_Mask, width, DEC_POINT_POS)
% FIXED_POINT_MUL: Signed fixed-point approximate multiplier using Approx-T
% - A, B: signed fixed-point values (as integers in 2's complement)
% - width: total bit width (e.g. 8)
% - DEC_POINT_POS: fractional bit position
% - Conf_Bit_Mask: approx config (e.g. 63 for all terms)

% Ensure values are interpreted as signed
if A < 0
    A_unsigned = 2^width + A;  % e.g. -52 â†’ 204
else
    A_unsigned = A;
end
if B < 0
    B_unsigned = 2^width + B;
else
    B_unsigned = B;
end

% Extract sign
signA = bitget(A_unsigned, width);
signB = bitget(B_unsigned, width);

% Extract magnitude (lower width-1 bits)
mag_A = bitand(A_unsigned, 2^(width-1) - 1);
mag_B = bitand(B_unsigned, 2^(width-1) - 1);

% Unsigned approximate multiplication of magnitudes
mag_R = unsigned_int_mul(mag_A, mag_B, Conf_Bit_Mask, width);

% Apply sign
signR = xor(signA, signB);
if signR
    R_signed = -double(mag_R);
else
    R_signed = double(mag_R);
end

% Shift right for fixed point
R_val = floor(R_signed / 2^DEC_POINT_POS);

% Wrap result into signed 2*width-bit value
if R_val < 0
    R = R_val + 2^(2*width);  % wrap negative result
else
    R = R_val;
end
end
